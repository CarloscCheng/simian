#!/usr/bin/env python
#
# Copyright 2010 Google Inc. All Rights Reserved.

"""Custom preflight script to run before bulk of Munki executions.

Exit codes: see constants below.
"""



import errno
import logging
import os
import re
import shutil
import sys
import time
import urllib
import flight_common
from munkilib import munkicommon


IFCONFIG = '/sbin/ifconfig'
# Start exit codes
STATUS_SUCCESS = (0, 'SUCCESS')
STATUS_FAIL_AUTH = (10, 'failure obtaining auth token')
STATUS_FAIL_CONFIG_SETUP = (13, 'Config setup errors')
STATUS_SERVER_EXIT_FEEDBACK = (14, 'Server send EXIT command')
# End exit codes
MUNKI_CLIENT_ID_HEADER_KEY = 'X-munki-client-id'
MAX_ATTEMPTS = 4
MSULOGFILE = '/Users/Shared/.com.googlecode.munki.ManagedSoftwareUpdate.log'
MSULOGDIR = '/Users/Shared/.com.googlecode.munki.ManagedSoftwareUpdate.logs'

DEBUG = False
if DEBUG:
  logging.getLogger().setLevel(logging.DEBUG)
else:
  logging.getLogger().setLevel(logging.INFO)


def LoginToServer(config, client_id, user_settings, client_exit=None):
  """Sets an auth token cookie header to a plist object.

  Args:
    config: Preferences object.
    client_id: dict client identifier.
    user_settings: dict of user settings.
    client_exit: optional, default None, str explaining why the client is
      requesting to exit its execution.
  """
  headers = []

  # Preserve all non-Cookie and non-ClientID headers that may exist.
  if munkicommon.ADDITIONAL_HTTP_HEADERS_KEY in config:
    for header in config[munkicommon.ADDITIONAL_HTTP_HEADERS_KEY]:
      if (not header.startswith('Cookie:') and
          not header.startswith(MUNKI_CLIENT_ID_HEADER_KEY)):
        headers.append(header)

  # Write CA cert and get a token from server.
  managed_installs_dir = munkicommon.pref('ManagedInstallDir')
  certs_dir = os.path.join(managed_installs_dir, 'certs')
  cert_file_path = os.path.join(certs_dir, 'ca.pem')
  if not os.path.isdir(certs_dir):
    os.makedirs(certs_dir)
  script_dir = os.path.realpath(os.path.dirname(sys.argv[0]))
  script_path = os.path.join(script_dir, flight_common.AUTH_BINARY)

  client_id_str = flight_common.DictToStr(client_id)

  if user_settings:
    if not HAS_JSON:
      logging.error('preflight cannot send user_settings, json missing')
      user_settings_str = ''
    else:
      try:
        user_settings_str = urllib.quote(
            json.dumps(flight_common.Flatten(user_settings)))
      except TypeError:
        logging.error(
            'preflight cannot flatten user_settings: %s', str(user_settings))
        user_settings_str = ''
  else:
    user_settings_str = ''

  client_params = {
      '_report_type': 'preflight',
      'client_id': client_id_str,
      'user_settings': user_settings_str,
  }
  if client_exit:
    client_params['client_exit'] = client_exit

  client_params = urllib.urlencode(client_params)

  url = flight_common.GetServerURL()
  cmd = [
      script_path, '--login', '--server', url, '--print-cookie',
      '--write-root-ca-certs', cert_file_path,
      '--report', 'feedback:OK=0:%s=77:%s=88:%s=99:body:%s' % (
          flight_common.ReportFeedback.EXIT,
          flight_common.ReportFeedback.REPAIR,
          flight_common.ReportFeedback.UPLOAD_LOGS,
          client_params),
  ]
  try:
    return_code, stdout, stderr = flight_common.Exec(
        cmd, timeout=90, waitfor=0.5)
  except OSError, e:
    logging.error('Exec(%s) error: %s', cmd, e)
    return_code = -1
    stdout = ''

  token = stdout.strip()

  # Add the Cookie and client id to the headers.
  headers.append('Cookie: %s' % token)
  headers.append('%s: %s' % (MUNKI_CLIENT_ID_HEADER_KEY, client_id_str))
  # Replace AdditionalHttpHeaders with the new headers list.
  config[munkicommon.ADDITIONAL_HTTP_HEADERS_KEY] = headers

  if return_code == 99:
    # write new token/client_id headers to secure plist and upload logs.
    flight_common.UploadClientLogFiles()
  elif return_code == 88:
    # write new token/client_id headers to secure plist and repair client.
    try:
      logging.info('Reinstalling Munki client....')
      flight_common.RepairClient()
      logging.info('Client successfully reinstalled.')
    except flight_common.RepairClientError, e:
      logging.exception('RepairClientError: %s', str(e))
  elif return_code == 77:
    logging.warning('preflight received EXIT feedback from server; exiting....')
    sys.exit(STATUS_SERVER_EXIT_FEEDBACK[0])
  elif return_code != 0 or not stdout:
    logging.error(
        'preflight failure obtaining token (%d): %s', return_code, stderr)
    sys.exit(STATUS_FAIL_AUTH[0])

  # Set the AUTH1_TOKEN global, so it doesn't need to be read from CFPrefrences.
  flight_common.AUTH1_TOKEN = token


def IsOnWwan():
  """"Checks WWAN device connection status.

  Note: this may produce false-positives, and may not catch all WWAN devices.
    Several Sprint and Verizon devices were tested, all of which create ppp0
    upon connection. However, L2TP VPN also creates ppp0 (Google no longer uses
    this as of Q2-2010 in favor of SSLVPN). A stronger check is probably needed
    at some point.

  Returns:
    Boolean. True if WWAN device is active, False otherwise.
  """
  wwan_iface = 'ppp0'
  try:
    return_code, unused_out, unused_err = flight_common.Exec(
        [IFCONFIG, wwan_iface])
  except OSError, e:
    logging.error('Exec(%s) error: %s', IFCONFIG, e)
    return_code = -1

  return return_code == 0  # ifconfig exits with 1 if interface doesn't exist.


def IsOnAndroidWap():
  """Checks if the AirPort is connected to Android WAP tether.

  Returns:
    Booelan. True if WAP is providing connection, False otherwise.
  """
  airport_iface = 'en1'
  # Android WAP uses a very specific subnet (192.168.43.0/24) as well as
  # dnsmasq.
  try:
    return_code, stdout, unused_err = flight_common.Exec(
        [IFCONFIG, airport_iface])
  except OSError, e:
    logging.error('Exec(%s) error: %s', IFCONFIG, e)
    return_code = -1

  if return_code != 0:  # interface was likely not found.
    return False
  # 0xffffff00 is a hex representation of /24.
  android_wap_match = re.search(
      r'inet\s+192\.168\.43\.\d{1,3}\s+netmask\s+0xffffff00\s+', stdout)
  if android_wap_match is not None:
    # IP and netmask look like Android WAP, so check dnsmasq.
    cmd = ['host', '-W', '5', '-c', 'CHAOS', '-t', 'txt', 'VERSION.BIND',
           '192.168.43.1']
    try:
      return_code, stdout, unused_err = flight_common.Exec(cmd)
    except OSError, e:
      logging.error('Exec(%s) error: %s', cmd, e)
      return_code = -1

    if return_code != 0:
      return False
    dnsmasq_match = re.search(
        'VERSION\.BIND descriptive text "dnsmasq-.*"', stdout)
    if dnsmasq_match is not None:
      # IP, netmask and dnsmasq all match Android WAP tethering.
      return True

  return False




def CreateEmptyDirectory(attempt=0):
  """Create and/or maintain an empty directory.

  Args:
    attempt: int, default 0, the attempt number.
  Returns:
    str, path to empty directory
  Exits:
    with status STATUS_FAIL_CONFIG_SETUP[0] if MAX_ATTEMPTS have been made.
  """
  if attempt == MAX_ATTEMPTS:
    logging.error('preflight failure setting up empty dir')
    sys.exit(STATUS_FAIL_CONFIG_SETUP[0])

  time.sleep(attempt)

  managed_installs_dir = munkicommon.pref('ManagedInstallDir')
  path = os.path.join(managed_installs_dir, '.purposefully_empty_dir')

  remove = False
  create = False

  if os.path.exists(path):
    if os.path.isdir(path):
      if os.listdir(path):
        remove = 'd'
    else:
      remove = 'f'
  else:
    create = True

  if remove:
    try:
      if remove == 'd':
        shutil.rmtree(path)
      elif remove == 'f':
        os.unlink(path)
    except OSError, e:
      if e.args[0] == errno.ENOENT:
        # it went missing after we just found it.  try to regain control.
        logging.critical('%s went missing after it existed', path)
        return CreateEmptyDirectory(attempt + 1)
      else:
        # some other error.
        return CreateEmptyDirectory(attempt + 1)

  if remove or create:
    try:
      os.mkdir(path)
    except OSError, e:
      if e.args[0] == errno.EEXIST:
        # it already exists.  try to regain control of it.
        return CreateEmptyDirectory(attempt + 1)
      else:
        # some other error.  try again.
        logging.critical('mkdir(%s) error: %s', path, str(e))
        return CreateEmptyDirectory(attempt + 1)

  return path


def GetManagedSoftwareUpdateLogFile(logfile=MSULOGFILE):
  """Get logs from one MSU log file.

  This function modifies the existing log file by removing it, thus
  rolling the logs also.

  Args:
    logfile: str, log file to open
  Returns:
    array of dicts in form = {
      'time': float, Unix timestamp
      'user': str, like "username"
      'source': str, like "MSU",
      'event': str, like "launched"
      'desc': str, like "additional descriptive text"
    }
  """
  if not os.path.exists(logfile):
    return []

  name = '%s.%d.%d' % (logfile, os.getpid(), time.time())
  try:
    os.link(logfile, name)
  except OSError:
    return []

  fd = open(name, 'r')
  os.unlink(logfile)
  logs = []

  try:
    log_re = re.compile('^(\d+\.\d+) INFO (\w+) : @@([^:]+):([^:]+)@@\s?(.*)')

    r = fd.readline()
    while r:
      r = r.strip()
      m = log_re.search(r)
      if m:
        logs.append({
            'time': float(m.group(1)),
            'user': m.group(2),
            'source': m.group(3),
            'event': m.group(4),
            'desc': m.group(5),
        })
      r = fd.readline()

    fd.close()
  except IOError, e:
    # some error parsing the logs, logs may have been lost now.
    # returning the symlink is possible to put the log file back, but
    # problematic if new log files were written during processing.
    # just continue with what we have and mark failure.
    logs.append({
        'time': time.time(),
        'user': 'preflight',
        'source': 'truncate',
        'event': 'truncate',
        'desc': str(e)})

  try:
    os.unlink(name)
  except OSError:
    pass

  return logs


def GetManagedSoftwareUpdateLogs():
  """Get logs from all MSU log files.

  Returns:
    array of dicts in same form as GetManagedSoftwareUpdateLogFile().
  """
  logs = []
  logs.extend(GetManagedSoftwareUpdateLogFile(MSULOGFILE))
  if os.path.isdir(MSULOGDIR):
    for name in os.listdir(MSULOGDIR):
      logs.extend(
          GetManagedSoftwareUpdateLogFile(os.path.join(MSULOGDIR, name)))
  return logs


def PostManagedSoftwareUpdateLogs(logs):
  """Post Managed Software Update logs to Munki server.

  Args:
    logs: same format as output from GetManagedSoftwareUpdateLogs
  """
  args = []
  for log in logs:
    kv = ':'.join(map(lambda k: '%s=%s' % (k, log[k]), log))
    args.extend(['--report', 'dict:msu_log:%s' % kv])

  if args:
    flight_common.PerformServerRequest(args, login=False, logout=False)


def main(args):
  if len(args) > 1:
    runtype = args[1]
  else:
    runtype = 'custom'

  # support enterprise/802.1x user-context wifi auth.
  # don't bother to perform preflight and exit OK immediately since there's no
  # network connection.
  if runtype == 'logoutinstall':
    sys.exit(0)

  # load the NONSECURE ManagedInstalls.plist
  regular_config = munkicommon.ManagedInstallsPreferences()


  secure_config = munkicommon.SecureManagedInstallsPreferences()

  # update the ClientIdentifier key with the custom client id.
  client_id = flight_common.GetClientIdentifier(runtype)
  secure_config['ClientIdentifier'] = client_id['track']

  user_settings = {}

  # If the munki exec is an auto run (launchd), exit if on WWAN or Android WAP.
  client_exit = None
  if runtype == 'auto':
    if IsOnWwan():
      client_exit = 'WWAN device ppp0 is active'
    elif IsOnAndroidWap():
      client_exit = 'Android WAP tether is active'

  # get a client auth token/cookie from the server, and post connection data.
  LoginToServer(secure_config, client_id, user_settings, client_exit)

  # post recent MSU logs
  logs = GetManagedSoftwareUpdateLogs()
  PostManagedSoftwareUpdateLogs(logs)

  # load user settings
  if user_settings:
    regular_config['UserSettings'] = user_settings
  else:
    if 'UserSettings' in regular_config:
      del regular_config['UserSettings']  # wipe existing UserSettings.

  # setup blank directory for capath setting
  path = CreateEmptyDirectory()
  regular_config['SoftwareRepoCAPath'] = path

  # enable MSU logging
  regular_config['MSULogEnabled'] = True

  # If setting is enabled, force Simian Apple SUS integration.
  if client_id.get('applesus'):
    regular_config['InstallAppleSoftwareUpdates'] = True
    # Get Apple Software Update Service catalog from server and set locally.
    flight_common.GetAppleSUSCatalog()

  # Report installs/etc to server.
  flight_common.UploadAllManagedInstallReports(client_id.get('on_corp', 'None'))

  # Delete the temp dir that munkicommon creates on import.
  munkicommon.cleanUpTmpDir()


if __name__ == '__main__':
  main(sys.argv)
