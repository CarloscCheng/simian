#!/usr/bin/env python
#
# Copyright 2010 Google Inc. All Rights Reserved.

"""Custom postflight script to run before bulk of Munki executions."""




import os
import sys
import flight_common
from munkilib import FoundationPlist as fpl
from munkilib import munkicommon
munkicommon.cleanUpTmpDir()  # munkicommon creates a tempdir on import.


def RemoveAuthTokenHeaderFromPlist(plist):
  """Expires auth token and removes cookie header from a plist object.

  Args:
    plist: FoundationPlist.NSCFDictionary object.
  """
  headers = []

  # Expire the auth token, and preserve all non-Cookie headers that may exist.
  if munkicommon.ADDITIONAL_HTTP_HEADERS_KEY in plist:
    # remove cookie headers from the plist.
    for header in plist[munkicommon.ADDITIONAL_HTTP_HEADERS_KEY]:
      if not header.startswith('Cookie:'):
        headers.append(header)
    if headers:
      plist[munkicommon.ADDITIONAL_HTTP_HEADERS_KEY] = headers
    else:
      # if there are no headers remaining, delete the key entirely.
      del(plist[munkicommon.ADDITIONAL_HTTP_HEADERS_KEY])


def main(args):
  if len(args) > 1:
    runtype = args[1]
  else:
    runtype = 'custom'

  # support enterprise/802.1x user-context wifi auth.
  # don't bother to perform postflight and exit OK immediately since there's no
  # network connection.
  if runtype == 'logoutinstall':
    sys.exit(0)

  # read SecureConfig.plist.
  plist = fpl.readPlist(munkicommon.SECURE_MANAGED_INSTALLS_PLIST_PATH)

  # Post client_id to server.
  # TODO(user): refactor PostReport* to support multiple reports at once
  # and move this into UploadAllManagedInstallReports.
  client_id = flight_common.GetClientIdentifier()
  params = {
     'client_id': flight_common.DictToStr(client_id),
     'pkgs_to_install': flight_common.GetRemainingPackagesToInstall(),
  }
  flight_common.PostReportToServer('postflight', params, logout=False)

  # Report installs/etc to server.
  flight_common.UploadAllManagedInstallReports(
      client_id.get('on_corp', 'None'), logout=True)

  # expire auth token and remove cookie from plist.
  RemoveAuthTokenHeaderFromPlist(plist)

  # save SecureConfig.plist.
  fpl.writePlist(plist, munkicommon.SECURE_MANAGED_INSTALLS_PLIST_PATH)


if __name__ == '__main__':
  main(sys.argv)
