#!/usr/bin/python
#
# Copyright 2010 Google Inc. All Rights Reserved.

"""Script to output Simian dependent facter-like output of various variables."""

import re
import subprocess
from simian import settings


def Exec(cmd):
  """Executes a process and returns exit code, stdout, stderr.

  Args:
    cmd: str or sequence, command and optional arguments to execute.

  Returns:
    Tuple. (Integer return code, string standard out, string standard error).
  """
  if type(cmd) is str:
    shell = True
  else:
    shell = False
  try:
    p = subprocess.Popen(
      cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)
    stdout, stderr = p.communicate()
    return p.returncode, stdout, stderr
  except (IOError, OSError), e:
    return (99, '', str(e))
    

def GetSerialNumber():
  """Returns the machine serial number."""
  return_code, stdout, unused_stderr = Exec(
      ['system_profiler', 'SPHardwareDataType'])

  serial_number = 'UNKNOWN_SERIAL_NUMBER'
  
  if return_code != 0:
    return serial_number

  serial_number_re = re.compile('Serial number[^:]+:\s+(.*)', re.IGNORECASE)  
  
  for l in stdout.splitlines():
    m = serial_number_re.search(l)
    if m:
      serial_number = m.group(1)
      break
  
  return serial_number


def GetFacterFacts():
  """Returns a dictionary of facter facts."""
  return_code, stdout, unused_stderr = Exec(['facter', '-p'])

  # If execution of factor was successful build the client identifier
  if return_code != 0:
    return {}

  facts = {}

  # Iterate over the facter output and create a dictionary of the output
  lines = stdout.splitlines()
  for line in lines:
    (key, unused_sep, value) = line.split(' ', 2)
    value = value.strip()
    facts[key] = value
  return facts


SETTINGS_FACTER = {
    'certname': settings.CERTNAME or GetSerialNumber(),
    'primary_user': settings.PRIMARY_USER,
    'sp_local_host_name': settings.HOSTNAME,
    'configtrack': settings.CONFIGTRACK,
    'simiantrack': settings.SIMIANTRACK,
    'site': settings.SITE,
    'applesus': settings.APPLESUS,
}


def main():
  facts = GetFacterFacts()
  # place Simian configs where facter is lacking (may be 100%).
  for name in SETTINGS_FACTER:
    if name not in facts:
      facts[name] = SETTINGS_FACTER[name]
  print """certname => %(certname)s
primary_user => %(primary_user)s
sp_local_host_name => %(sp_local_host_name)s
configtrack => %(configtrack)s
simiantrack => %(simiantrack)s
site => %(site)s
applesus => %(applesus)s""" % facts


if __name__ == '__main__':
  main()
